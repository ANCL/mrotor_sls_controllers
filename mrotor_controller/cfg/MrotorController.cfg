#!/usr/bin/env python
PACKAGE = "mrotor_controller"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# >>> Controller Switches
gen.add("ctrl_enabled", bool_t, 0, "Switch of custom outer-loop controller", False)
gen.add("rate_ctrl_enabled", bool_t, 0, "Switch of using rate controller or attitude controller", True)
gen.add("traj_tracking_enabled", bool_t, 0, "Switch of trajectory tracking", False)
gen.add("finite_diff_enabled", bool_t, 0, "Switch of finite difference", True)
gen.add("mission_enabled", bool_t, 0, "Switch of mission mode", False)
gen.add("cmdloop_enabled", bool_t, 0, "Switch of cmdloop mode", False)
gen.add("drag_comp_enabled", bool_t, 0, "Switch of rotor drag compensation", True)
gen.add("ekf_enabled", bool_t, 0, "Switch of outer-loop extended Kalman filter", False)
gen.add("lpf_enabled", bool_t, 0, "Switch of low-pass filter", False)
gen.add("use_onboard_att_meas", bool_t, 0, "Use onboard measurement of attitude", False)
gen.add("integrator_enabled", bool_t, 0, "Enable integrator of offboard controller", False)
# >>> Thresholds
gen.add("max_acc",    double_t,    0, "Max Feedback Acceleration", 8.0,  1.0, 30.0)
# >>> System Constants
gen.add("normalized_thrust_constant",   double_t, 0, "Normalized thrust constant", 0.0467832, 0.01, 0.5)
gen.add("normalized_thrust_offset",     double_t, 0, "Normalized thrust offset", -1.0, 0.0, 1.0)
# >>> Gains
gen.add("Kint_x", double_t,   0,  "Gain for X position error", 10.0,  0.0, 100.0)
gen.add("Kint_y", double_t,   0,  "Gain for Y position error", 10.0, 0.0, 100.0)
gen.add("Kint_z", double_t,   0,  "Gain for Z position error", 2.0, 0.0, 100.0)
gen.add("Kp_x", double_t,   0,  "Gain for X position error", 24.0,  0.0, 100.0)
gen.add("Kp_y", double_t,   0,  "Gain for Y position error", 24.0, 0.0, 100.0)
gen.add("Kp_z", double_t,   0,  "Gain for Z position error", 2.0, 0.0, 100.0)
gen.add("Kv_x", double_t,   0,  "Gain for X velocity error", 50.0,  0.0, 100.0)
gen.add("Kv_y", double_t,   0,  "Gain for Y velocity error", 50.0, 0.0, 100.0)
gen.add("Kv_z", double_t,   0,  "Gain for Z velocity error", 3.0, 0.0, 100.0)
gen.add("Ka_x", double_t,   0,  "Gain for X acceleration error", 35.0,  0.0, 100.0)
gen.add("Ka_y", double_t,   0,  "Gain for Y acceleration error", 35.0, 0.0, 100.0)
gen.add("Ka_z", double_t,   0,  "Gain for Z acceleration error", 0.0, 0.0, 100.0)
gen.add("Kj_x", double_t,   0,  "Gain for X jerk error", 10.0,  0.0, 100.0)
gen.add("Kj_y", double_t,   0,  "Gain for Y jerk error", 10.0, 0.0, 100.0)
gen.add("Kj_z", double_t,   0,  "Gain for Z jerk error", 0.0, 0.0, 100.0)
# >>> Reference Trajectory
gen.add("c_x", double_t,    0, "Center of x coordinate trajectory", 0.0, -2.0, 2.0)
gen.add("c_y", double_t,    0, "Center of y coordinate trajectory", 0.0, -2.0, 2.0)
gen.add("c_z", double_t,    0, "Center of z coordinate trajectory", 1.0, 0.0, 3.0)
gen.add("r_x", double_t,    0, "Radium of x coordinate trajectory", 1.0, 0.0, 2.0)
gen.add("r_y", double_t,    0, "Radium of y coordinate trajectory", 1.0, 0.0, 2.0)
gen.add("r_z", double_t,    0, "Radium of z coordinate trajectory", 0.0, 0.0, 2.0)
gen.add("fr_x", double_t,   0, "Frequency of x coordinate trajectory", 1.0, 0.0, 5.0)
gen.add("fr_y", double_t,   0, "Frequency of y coordinate trajectory", 1.0, 0.0, 5.0)
gen.add("fr_z", double_t,   0, "Frequency of z coordinate trajectory", 0.0, 0.0, 5.0)
gen.add("ph_x", double_t,   0, "Phase shift of x coordinate trajectory", 1.57, -10, 10)
gen.add("ph_y", double_t,   0, "Phase shift of y coordinate trajectory", 0.0, -10, 10)
gen.add("ph_z", double_t,   0, "Phase shift of z coordinate trajectory", 0.0, -10, 10)
# >>> Mission References
gen.add("c_x_1", double_t,    0, "Center of x coordinate trajectory", 0.0, -2.0, 2.0)
gen.add("c_y_1", double_t,    0, "Center of y coordinate trajectory", 0.0, -2.0, 2.0)
gen.add("c_z_1", double_t,    0, "Center of z coordinate trajectory", 1.0, 0.0, 3.0)
gen.add("c_x_2", double_t,    0, "Center of x coordinate trajectory", 0.0, -2.0, 2.0)
gen.add("c_y_2", double_t,    0, "Center of y coordinate trajectory", 0.0, -2.0, 2.0)
gen.add("c_z_2", double_t,    0, "Center of z coordinate trajectory", 1.0, 0.0, 3.0)
gen.add("c_x_3", double_t,    0, "Center of x coordinate trajectory", 0.0, -2.0, 2.0)
gen.add("c_y_3", double_t,    0, "Center of y coordinate trajectory", 0.0, -2.0, 2.0)
gen.add("c_z_3", double_t,    0, "Center of z coordinate trajectory", 1.0, 0.0, 3.0)
# >>> Rotor Drag Compensation
gen.add("rotor_drag_d_x", double_t,    0, "Rotor drag compensation coefficient x", 1.25, -10.0, 10.0)
gen.add("rotor_drag_d_y", double_t,    0, "Rotor drag compensation coefficient y", 1.25, -10.0, 10.0)
gen.add("rotor_drag_d_z", double_t,    0, "Rotor drag compensation coefficient z", 0.0, -10.0, 10.0)


exit(gen.generate(PACKAGE, "mrotor_controller", "MrotorController"))